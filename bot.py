import os
import yt_dlp
from yt_dlp.utils import DownloadError
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Updater, CommandHandler, MessageHandler, Filters,
    CallbackContext, ConversationHandler
)

# –ë–æ—Ç—Ç—ã“£ —Ç–æ–∫–µ–Ω—ñ (”©–∑—ñ“£–¥—ñ–∫—ñ)
TOKEN = "7302516914:AAFf7O9szcJD5GZGSsSs3TuyHdyvKhF8zN8"

# Conversation —ç—Ç–∞–ø—Ç–∞—Ä—ã
LANGUAGE, SEARCH = range(2)

# ”ò—Ä “õ–æ–ª–¥–∞–Ω—É—à—ã–Ω—ã“£ —Ç—ñ–ª—ñ —Å–∞“õ—Ç–∞–ª–∞–¥—ã
user_languages = {}

# –ö”©–ø—Ç—ñ–ª–¥—ñ —Ö–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä
MESSAGES = {
    'kz': {
        'start': "–°”ô–ª–µ–º! –ú–µ–Ω Tyn‚ÄôdaMusicBot.\n–¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:",
        'choose': "“ö–∞–Ω–¥–∞–π ”ô–Ω –∂“Ø–∫—Ç–µ–π—ñ–Ω?",
        'downloading': "–Ü–∑–¥–µ–ø –∂–∞—Ç—ã—Ä–º—ã–Ω: ¬´{}¬ª‚Ä¶",
        'error': "“ö–∞—Ç–µ —à—ã“õ—Ç—ã: {}",
        'limit': "–ë“±–ª ”ô–Ω–¥—ñ –∂“Ø–∫—Ç–µ—É –º“Ø–º–∫—ñ–Ω –µ–º–µ—Å. –ë–∞—Å“õ–∞ ”ô–Ω –∂–∞–∑—ã–ø –∫”©—Ä—ñ“£—ñ–∑.",
    },
    'ru': {
        'start': "–ü—Ä–∏–≤–µ—Ç! –Ø Tyn‚ÄôdaMusicBot.\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        'choose': "–ö–∞–∫—É—é –ø–µ—Å–Ω—é —Ö–æ—Ç–∏—Ç–µ —Å–∫–∞—á–∞—Ç—å?",
        'downloading': "–ò—â—É: ¬´{}¬ª‚Ä¶",
        'error': "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {}",
        'limit': "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å —ç—Ç—É –ø–µ—Å–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é.",
    },
    'en': {
        'start': "Hi! I'm Tyn‚ÄôdaMusicBot.\nChoose your language:",
        'choose': "What song do you want?",
        'downloading': "Searching: ¬´{}¬ª‚Ä¶",
        'error': "An error occurred: {}",
        'limit': "Can't download this song. Try another one.",
    }
}


def start(update: Update, context: CallbackContext):
    reply_keyboard = [['üá∞üáø “ö–∞–∑–∞“õ—à–∞', 'üá∑üá∫ –†—É—Å—Å–∫–∏–π', 'üá¨üáß English']]
    update.message.reply_text(
        "–°”ô–ª–µ–º! Hello!\n–¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose your language:",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return LANGUAGE


def choose_language(update: Update, context: CallbackContext):
    lang_text = update.message.text
    if '“ö–∞–∑–∞“õ—à–∞' in lang_text:
        user_languages[update.effective_user.id] = 'kz'
    elif '–†—É—Å—Å–∫–∏–π' in lang_text:
        user_languages[update.effective_user.id] = 'ru'
    else:
        user_languages[update.effective_user.id] = 'en'

    lang = user_languages[update.effective_user.id]
    update.message.reply_text(MESSAGES[lang]['choose'], reply_markup=ReplyKeyboardRemove())
    return SEARCH


def download_audio(query: str) -> str:
    """YouTube-—Ç–∞–Ω –∞—É–¥–∏–æ –∂“Ø–∫—Ç–µ–ø, 'song.mp3' –∞—Ç—ã–º–µ–Ω “õ–∞–π—Ç–∞—Ä–∞–¥—ã."""
    ydl_opts = {
        'format': 'bestaudio/best',
        'outtmpl': 'song.%(ext)s',
        'noplaylist': True,
        'quiet': True,
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': 'mp3',
            'preferredquality': '320',
        }],
    }
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(f"ytsearch:{query}", download=True)
        return "song.mp3"


def handle_message(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    lang = user_languages.get(user_id, 'kz')  # –ï–≥–µ—Ä –∂–æ“õ –±–æ–ª—Å–∞, “õ–∞–∑–∞“õ—à–∞ –±–æ–ª–∞ –±–µ—Ä–µ–¥—ñ
    query = update.message.text.strip()

    update.message.reply_text(MESSAGES[lang]['downloading'].format(query))
    try:
        file_path = download_audio(query)
        with open(file_path, 'rb') as f:
            update.message.reply_audio(audio=f)
        os.remove(file_path)
    except DownloadError as e:
        if 'Sign in to confirm you‚Äôre not a bot' in str(e):
            update.message.reply_text(MESSAGES[lang]['limit'])
        else:
            update.message.reply_text(MESSAGES[lang]['error'].format(e))
    except Exception as e:
        update.message.reply_text(MESSAGES[lang]['error'].format(e))


def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            LANGUAGE: [MessageHandler(Filters.text & ~Filters.command, choose_language)],
            SEARCH: [MessageHandler(Filters.text & ~Filters.command, handle_message)],
        },
        fallbacks=[CommandHandler("start", start)],
    )

    dp.add_handler(conv_handler)
    updater.start_polling()
    updater.idle()


if __name__ == "__main__":
    main()